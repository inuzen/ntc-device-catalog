import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './store';
// import { fetchCount } from './counterAPI';

export interface AuthState {
    allowEditing: boolean;
}

const initialState: AuthState = {
    allowEditing: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const verifyPassword = createAsyncThunk('auth', async (password: string) => {
//     const response = await fetch('https://swapi.dev/api/planets/4/');
//     const res: any = response.json();
//     console.log(res);

//     return res;
// });

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        enableEditing: (state) => {
            state.allowEditing = true;
        },
        disableEditing: (state) => {
            state.allowEditing = false;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

    // extraReducers: (builder) => {
    //     builder.addCase(verifyPassword.fulfilled, (state, action) => {
    //         state.status = 'idle';
    //         state.value += action.payload;
    //     });
    // },
});

export const { enableEditing, disableEditing } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const isEditingAllowed = (state: RootState) => state.auth.allowEditing;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//     (dispatch, getState) => {
//         const currentValue = selectCount(getState());
//         if (currentValue % 2 === 1) {
//             dispatch(incrementByAmount(amount));
//         }
//     };

export default authSlice.reducer;
